{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "PYTHON": {
        "prefix": "python",
        "body": [
            "# -*- coding: utf-8 -*-",
            "",
            "# ***************************************************",
            "# * File        : $TM_FILENAME",
            "# * Author      : Zhefeng Wang",
            "# * Email       : zfwang7@gmail.com",
            "# * Date        : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            "# * Version     : 1.0.$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR",
            "# * Description : description",
            "# * Link        : link",
            "# * Requirement : 相关模块版本需求(例如: numpy >= 2.1.0)",
            "# ***************************************************",
            "",
            "__all__ = []"
            "",
            "# python libraries",
            "import os",
            "import sys",
            "from pathlib import Path",
            "ROOT = str(Path.cwd())",
            "if ROOT not in sys.path:",
            "    sys.path.append(ROOT)", 
            "import warnings",
            "warnings.filterwarnings(\"ignore\")",
            "",
            "# global variable",
            "LOGGING_LABEL = Path(__file__).name[:-3]",
            "os.environ['LOG_NAME'] = LOGGING_LABEL",
            "from utils.log_util import logger",
            // "GLOBAL_VARIABLE = None",
            "",
            "",
            "${1}",
            // "\n",
            // "def func():",
            // "	pass",
            // "\n",
            // "class DemoClass:",
            // "    \"\"\"",
            // "    类说明文档",
            // "    \"\"\"",
            // "    _class_config_param = None  # 类私有不变量",
            // "\t",
            // "    def __init__(self, id_):",
            // "        self.id = id_",
            // "        self.param_a = None  # 类公开变量",
            // "        self._internal_param = None  # 类私有变量",
            // "\t",
            // "    def ClassDemoFunc(self):",
            // "        \"\"\"",
            // "        类普通方法",
            // "        \"\"\"",
            // "        pass",
            // "\t",
            // "    def _ClassPrivateFunc(self):",
            // "        \"\"\"",
            // "        类私有方法",
            // "        \"\"\"",
            // "        pass",
            // "\n",
            // "class _PrivateDemoClass:",
            // "    \"\"\"",
            // "    私有类",
            // "    \"\"\"",
            // "\t",
            // "    def __init__(self):",
            // "    pass",
            "\n",
            "\n",
            "# 测试代码 main 函数",
            "def main():",
            "    pass",
            "",
            "if __name__ == \"__main__\":",
            "    main()",
            ""
        ],
    }, 
    "PYSCI": {
        "prefix": "sci",
        "body": [
            "import numpy as np",
            "import pandas as pd",
            "import matplotlib.pyplot as plt",
            "import seaborn as sns",
            "plt.rcParams['font.sans-serif']=['SimHei', 'Arial Unicode MS'] # 用来正常显示中文标签",
            "plt.rcParams['axes.unicode_minus'] = False # 用来显示负号",
            "plt.style.use('seaborn-v0_8-whitegrid')",
            "plt.rcParams['figure.autolayout'] = True # layout",
            "plt.rcParams['axes.grid'] = True # grid",
            "plt.rc(",
            "    \"figure\",",
            "    autolayout=True,",
            "    figsize=(11, 4.5),",
            "    titleweight=\"bold\",",
            "    titlesize=18,",
            ")",
            "plt.rc(",
            "    \"axes\",",
            "    labelweight=\"bold\",",
            "    labelsize=\"large\",",
            "    titleweight=\"bold\",",
            "    titlesize=16,",
            "    titlepad=10,",
            ")", 
            "train_scatter_plot_params = dict(",
            "    color=\"0.75\",",
            "    style=\".-\",",
            "    linewidth=2,",
            "    markeredgecolor=\"0.25\",",
            "    markerfacecolor=\"0.25\",",
            "    legend=True,",
            "    label=\"Train trues\",",
            ")",
            "test_scatter_plot_params = dict(",
            "    color=\"C2\",",
            "    style=\".-\",",
            "    linewidth=2,",
            "    markeredgecolor=\"0.25\",",
            "    markerfacecolor=\"0.25\",",
            "    legend=True,",
            "    label=\"Test trues\",",
            ")",
            "fit_line_plot_params = dict(",
            "    color=\"C0\",",
            "    style=\".-\",",
            "    linewidth=2,",
            "    legend=True,",
            "    label=\"Train preds\",",
            ")",
            "pred_line_plot_params = dict(",
            "    color=\"C1\",",
            "    style=\".-\",",
            "    linewidth=2,",
            "    legend=True,",
            "    label=\"Test preds\",",
            ")",
            "fore_line_plot_params = dict(",
            "    color=\"C3\",",
            "    style=\".-\",",
            "    linewidth=2,",
            "    legend=True,",
            "    label=\"Forecast\",",
            ")",
        ],
        "description": "生成 python 科学库 import"
    },
    "HEADER_COMMENT": {
        "prefix": "line",
        "body": [
            "# ------------------------------",
            "# ",
            "# ------------------------------",
        ],
        "description": "生成 python 科学库 import"
    },
    "TIMEFORMAT": {
        "prefix": "timefmt",
        "body": [
            "\"%Y-%m-%d %H:%M:%S\"",
        ],
        "description": "生成 time 格式"
    },
    "HEADER": {
        "prefix": "header",
        "body": [
            "# -*- coding: utf-8 -*-",
            "",
            "# ***************************************************",
            "# * File        : $TM_FILENAME",
            "# * Author      : Zhefeng Wang",
            "# * Email       : zfwang7@gmail.com",
            "# * Date        : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            "# * Version     : 1.0.$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR",
            "# * Description : description",
            "# * Link        : link",
            "# * Requirement : 相关模块版本需求(例如: numpy >= 2.1.0)",
            "# * TODO        : 1.",
            "# ***************************************************",
            "",
        ],
        "description": "生成 python 文件注释"
    },
    "TRY": {
        "prefix": "try",
        "body": [
            "try:",
            "    $1",
            "except:",
            "    logging.error(f\"{LOGGING_LABEL} {model_name} \" + \"\\n\" + str(traceback.format_exc()))"
        ],
        "description": "insert log to use"
    },
    "LOG": {
        "prefix": "log",
        "body": [
            "logger.info(f\"$1 {}\")",
        ],
        "description": "insert log to use"
    },
    "relative_path": {
        "prefix": "relative_path",
        "body": [
            "import os",
            "import sys",
            "from pathlib import Path",
            "ROOT = str(Path.cwd())",
            "if ROOT not in sys.path:",
            "    sys.path.append(ROOT)",
            "\n",
        ],
        "description": "生成相对引用"
    },
    // "relative_path_out": {
    //     "prefix": "relative_path_out",
    //     "body": [
    //         "import os",
    //         "import sys",
    //         "_path = os.path.abspath(os.path.dirname(__file__))",
    //         "if _path not in sys.path:",
    //         "    sys.path.append(_path)",
    //         "\n",
    //     ],
    //     "description": "生成相对引用"
    // },
    "LOCAL_TEST": {
        "prefix": "localtest",
        "body": [
            "# 测试代码 main 函数",
            "def main():",
            "	pass",
            "",
            "if __name__ == \"__main__\":",
            "	main()",
            ""
        ],
        "description": "生成模块本地测试"
    },
    "Torch Model Class": {
        "prefix": "model_cls",
        "body": [
            "class Model(nn.Module):",
            "",
            "    def __init__(self, $1) -> None:",
            "        super(Model, self).__init__()",
            "",
            "    def forward(self, x):",
            "        output = x",
            "        return output",
        ],
        "description": "生成 Torch Model Class"
    },
    "Torch import": {
        "prefix": "tc",
        "body": [
            "import torch",
            "import torch.nn as nn",
        ],
        "description": "生成 Torch Model Class"
    },
}
